{"version":3,"sources":["etc/constants.ts","lib/HOC/withEscalationPolicies.tsx","lib/HOC/withCreateIntegration.tsx","lib/hooks/useSendEvent.ts","lib/hooks/useFetchEscalationPolicies.ts","lib/HOC/withSendEvent.tsx","lib/hooks/useCreateIntegration.ts","examples/HOC/SendTestEvent.tsx","examples/HOC/IntegrationSettings.tsx","index.tsx"],"names":["BEARER_CLIENT_ID","INTEGRATION_NAME","INTEGRATION_SETUP_ID","REFERENCE_ID","withFunctionCall","factory","useSendEvent","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","eventResult","setEventResult","_useState5","_useState6","error","setError","bearer","useContext","BearerContext","data","sendEvent","useCallback","referenceId","functionFetch","query","setupId","then","result","catch","finally","Component","useFetchEscalationPolicies","policies","setPolicies","useEffect","_ref","useCreateIntegration","setReferenceId","createIntegration","policy","escalationPolicy","withSendEvent","fetch","handleSendEvent","React","console","log","alert","JSON","stringify","react","type","disabled","className","onClick","props","_useSendEvent","sendEventProps","objectWithoutProperties","react_default","a","createElement","assign","IntegrationSettings","_React$useState","_React$useState2","setEscalationPolicies","_React$useState3","_React$useState4","selectedPolicyKey","setSelectedPolicy","_useFetchEscalationPo","_useCreateIntegration","handlePolicyChange","event","target","value","handleSubmit","preventDefault","style","width","onSubmit","onChange","map","key","id","summary","HOC_SendTestEvent","rootElement","document","getElementById","render","lib","clientId"],"mappings":"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","file":"static/js/main.0f5f9ce7.chunk.js","sourcesContent":["// To change with the client id you'll find withing the dev portal\nexport const BEARER_CLIENT_ID =\n  \"2f535b38228787320c10e556e2cf82c6aeb48a942483e5f19f\"; // demo+sqreen@bearer.sh\n\n// Integration name you want to try. This is related to a specific account on Bearer.sh,\n// You'll find yours within Bearer's dev portal\nexport const INTEGRATION_NAME = \"a725bd-pager-duty-integration-demo\";\n\n// Integration setup-id. This is related to a specific account on Bearer.sh, and the above integration.\n// You'll find yours within Bearer's dev portal\nexport const INTEGRATION_SETUP_ID = \"882e24f0-4bda-11e9-a73b-6dac8ea7c0ec\";\n\n// This is a reference to the data stored in the bearer platform.\n// For this integration we've store the integration key from PagerDuty\nexport const REFERENCE_ID = \"9ea0f1-393b2d471c-b9ac1102-fd526493\";\n","import { factory } from '@bearer/react'\nimport { INTEGRATION_NAME } from '../../etc/constants'\n\nconst { withFunctionCall } = factory(INTEGRATION_NAME)\n\nexport const withEscalationPolicies = withFunctionCall<any>(\n  'listEscalationPolicies',\n)\n","import { INTEGRATION_NAME } from '../../etc/constants'\nimport { factory } from '@bearer/react'\n\nconst { withFunctionCall } = factory(INTEGRATION_NAME)\n\nexport const withCreateIntegration = withFunctionCall<any>('createIntegration')\n","import { useState, useContext, useCallback } from 'react'\nimport { EventResult } from '../types'\nimport { BearerContext } from '@bearer/react'\nimport { INTEGRATION_NAME } from '../../etc/constants'\n\nexport const useSendEvent = (INTEGRATION_SETUP_ID: string) => {\n  const [loading, setLoading] = useState(false)\n  const [eventResult, setEventResult] = useState<EventResult>()\n  const [error, setError] = useState<any>()\n  const { bearer } = useContext(BearerContext)\n\n  const sendEvent = useCallback((referenceId: string) => {\n    setLoading(true)\n    return bearer\n      .functionFetch<EventResult>(INTEGRATION_NAME, 'sendEvent', {\n        query: {\n          setupId: INTEGRATION_SETUP_ID,\n          referenceId,\n        },\n      })\n      .then(result => {\n        setEventResult(result.data)\n        return result.data\n      })\n      .catch(error => {\n        setError(error)\n        return error\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  }, [])\n\n  return { loading, data: { eventResult }, error, sendEvent }\n}\n","import { useState, useContext, useEffect } from 'react'\nimport { BearerContext } from '@bearer/react'\nimport { INTEGRATION_NAME } from '../../etc/constants'\nimport { Policy } from '../types'\n\nexport const useFetchEscalationPolicies = (INTEGRATION_SETUP_ID: string) => {\n  const [loading, setLoading] = useState(false)\n  const [policies, setPolicies] = useState<Policy[]>()\n  const [error, setError] = useState<any>()\n  const { bearer } = useContext(BearerContext)\n\n  useEffect(() => {\n    setLoading(true)\n\n    bearer\n      .functionFetch(INTEGRATION_NAME, 'listEscalationPolicies', {\n        query: { setupId: INTEGRATION_SETUP_ID },\n      })\n      .then(({ data }) => {\n        setPolicies(data)\n      })\n      .catch(setError)\n      .finally(() => setLoading(false))\n  }, [])\n\n  return { loading, data: { policies }, error }\n}\n","import React from 'react'\nimport { ComponentType } from 'react'\nimport { useSendEvent } from '../hooks/useSendEvent'\nimport { EventResult, FetchProps } from '../types'\n\nexport type SendEventProps = FetchProps<EventResult>\n\nexport function withSendEvent<P = any>(\n  Component: ComponentType<SendEventProps & P>,\n  INTEGRATION_SETUP_ID: string,\n): ComponentType<P> {\n  return (props: P) => {\n    const { sendEvent, data, ...sendEventProps } = useSendEvent(\n      INTEGRATION_SETUP_ID,\n    )\n\n    return (\n      <Component\n        data={data.eventResult}\n        fetch={sendEvent}\n        {...props}\n        {...sendEventProps}\n      />\n    )\n  }\n}\n","import { useState, useContext, useCallback } from 'react'\nimport { BearerContext } from '@bearer/react'\nimport { Policy } from '../types'\nimport { INTEGRATION_NAME } from '../../etc/constants'\n\nexport const useCreateIntegration = (INTEGRATION_SETUP_ID: string) => {\n  const [loading, setLoading] = useState(false)\n  const [referenceId, setReferenceId] = useState<string>()\n  const [error, setError] = useState<any>()\n  const { bearer } = useContext(BearerContext)\n\n  const createIntegration = useCallback(\n    (policy: Policy | undefined) => {\n      setLoading(true)\n      return bearer\n        .functionFetch(INTEGRATION_NAME, 'createIntegration', {\n          query: {\n            setupId: INTEGRATION_SETUP_ID,\n          },\n          escalationPolicy: policy,\n        })\n        .then(({ referenceId }) => {\n          setReferenceId(referenceId)\n          return referenceId\n        })\n        .catch(error => {\n          setError(error)\n          return error\n        })\n        .finally(() => {\n          setLoading(false)\n        })\n    },\n    [setLoading, INTEGRATION_SETUP_ID, setReferenceId, setError],\n  )\n\n  return { loading, data: { referenceId }, error, createIntegration }\n}\n","import * as React from 'react'\nimport { withSendEvent } from '../../lib'\nimport { INTEGRATION_SETUP_ID } from '../../etc/constants'\nimport { SendEventProps } from '../../lib/HOC/withSendEvent'\n\ninterface SendTestEventProps {\n  referenceId?: string\n}\n\nconst SendTestEvent: React.FC<SendEventProps & SendTestEventProps> = ({\n  referenceId,\n  fetch: sendEvent,\n  loading,\n}) => {\n  const handleSendEvent = React.useCallback(() => {\n    if (referenceId)\n      sendEvent(referenceId)\n        .then(data => {\n          console.log('Event details', data)\n          alert(JSON.stringify(data))\n        })\n        .catch(console.error)\n  }, [sendEvent, referenceId])\n\n  return (\n    <button\n      type=\"button\"\n      disabled={!referenceId || loading}\n      className=\"btn btn-secondary\"\n      onClick={handleSendEvent}\n    >\n      {loading ? 'Loading...' : 'Send test event'}\n    </button>\n  )\n}\n\nexport default withSendEvent(SendTestEvent, INTEGRATION_SETUP_ID)\n","import * as React from 'react'\nimport { Policy } from '../../lib/types'\nimport { useFetchEscalationPolicies, useCreateIntegration } from '../../lib'\nimport { INTEGRATION_SETUP_ID, REFERENCE_ID } from '../../etc/constants'\nimport SendTestEvent from './SendTestEvent'\n\nexport default function IntegrationSettings() {\n  const [policies, setEscalationPolicies] = React.useState<Policy[]>()\n  const [selectedPolicyKey, setSelectedPolicy] = React.useState<number>(-1)\n  const { data, loading } = useFetchEscalationPolicies(INTEGRATION_SETUP_ID)\n  const {\n    createIntegration,\n    data: { referenceId },\n  } = useCreateIntegration(INTEGRATION_SETUP_ID)\n\n  const handlePolicyChange = React.useCallback(\n    event => {\n      setSelectedPolicy(event.target.value)\n    },\n    [setSelectedPolicy],\n  )\n  const handleSubmit = React.useCallback(\n    event => {\n      event.preventDefault()\n      createIntegration(policies && policies[selectedPolicyKey])\n        .then(data => {\n          console.log('Integration details', data)\n        })\n        .catch(console.error)\n    },\n    [createIntegration],\n  )\n\n  React.useEffect(() => {\n    if (data) setEscalationPolicies(data.policies)\n  }, [data, setEscalationPolicies])\n\n  if (!policies || loading) {\n    return <p>Fetching escalation policies...</p>\n  }\n\n  return (\n    <form style={{ width: 300 }} onSubmit={handleSubmit}>\n      <select\n        className=\"form-control custom-select\"\n        value={selectedPolicyKey}\n        onChange={handlePolicyChange}\n      >\n        <option>Select an escalation policy</option>\n        <option>-------</option>\n        {policies.map((policy, key) => (\n          <option key={policy.id} value={key}>\n            {policy.summary}\n          </option>\n        ))}\n      </select>\n\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Save settings\n      </button>\n\n      <SendTestEvent referenceId={referenceId || REFERENCE_ID} />\n    </form>\n  )\n}\n","import * as React from 'react'\nimport { render } from 'react-dom'\nimport { Bearer } from '@bearer/react'\nimport { BEARER_CLIENT_ID } from './etc/constants'\n\n// To test different types of integration styles, just switch the uncommented line below\nimport IntegrationSettings from './examples/HOC/IntegrationSettings'\n// import IntegrationSettings from './test/hooks/IntegrationSettings'\n\nfunction App() {\n  return (\n    <Bearer clientId={BEARER_CLIENT_ID}>\n      <div className=\"App\">\n        <IntegrationSettings />\n      </div>\n    </Bearer>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"],"sourceRoot":""}