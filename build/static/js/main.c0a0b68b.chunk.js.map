{"version":3,"sources":["etc/constants.ts","lib/hooks/useFetchEscalationPolicies.ts","lib/hooks/useCreateIntegration.ts","lib/hooks/useSendEvent.ts","examples/HOC/SendTestEvent.tsx","lib/HOC/withSendEvent.tsx","examples/HOC/IntegrationSettings.tsx","lib/HOC/withCreateIntegration.tsx","lib/HOC/withEscalationPolicies.tsx","index.tsx"],"names":["BEARER_CLIENT_ID","INTEGRATION_NAME","useFetchEscalationPolicies","INTEGRATION_SETUP_ID","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","policies","setPolicies","_useState5","_useState6","error","setError","bearer","useContext","BearerContext","useEffect","functionFetch","query","setupId","then","_ref","data","catch","finally","useCreateIntegration","referenceId","setReferenceId","createIntegration","useCallback","policy","escalationPolicy","useSendEvent","eventResult","setEventResult","sendEvent","result","Component","withSendEvent","fetch","handleSendEvent","React","console","log","alert","JSON","stringify","react","type","disabled","className","onClick","props","_useSendEvent","sendEventProps","objectWithoutProperties","react_default","a","createElement","assign","EscalationPolicyForm","_useCreateIntegration","createIntegrationProps","withCreateIntegration","_React$useState","_React$useState2","selectedPolicyKey","setSelectedPolicy","handlePolicyChange","event","target","value","handleSubmit","preventDefault","style","width","onSubmit","onChange","map","key","id","summary","HOC_SendTestEvent","withEscalationPolicies","_useFetchEscalationPo","fetchEscalationPolicies","_ref2","rootElement","document","getElementById","render","lib","clientId","IntegrationSettings"],"mappings":"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","file":"static/js/main.c0a0b68b.chunk.js","sourcesContent":["// To change with the client id you'll find withing the dev portal\nexport const BEARER_CLIENT_ID =\n  \"2f535b38228787320c10e556e2cf82c6aeb48a942483e5f19f\"; // demo+sqreen@bearer.sh\n\n// Integration name you want to try. This is related to a specific account on Bearer.sh,\n// You'll find yours within Bearer's dev portal\nexport const INTEGRATION_NAME = \"a725bd-pager-duty-integration-demo\";\n\n// Integration setup-id. This is related to a specific account on Bearer.sh, and the above integration.\n// You'll find yours within Bearer's dev portal\nexport const INTEGRATION_SETUP_ID = \"882e24f0-4bda-11e9-a73b-6dac8ea7c0ec\";\n\n// This is a reference to the data stored in the bearer platform.\n// For this integration we've store the integration key from PagerDuty\nexport const REFERENCE_ID = \"9ea0f1-393b2d471c-b9ac1102-fd526493\";\n","import { useState, useContext, useEffect } from 'react'\nimport { BearerContext } from '@bearer/react'\nimport { INTEGRATION_NAME } from '../../etc/constants'\nimport { Policy } from '../types'\n\nexport const useFetchEscalationPolicies = (INTEGRATION_SETUP_ID: string) => {\n  const [loading, setLoading] = useState(false)\n  const [policies, setPolicies] = useState<Policy[]>()\n  const [error, setError] = useState<any>()\n  const { bearer } = useContext(BearerContext)\n\n  useEffect(() => {\n    setLoading(true)\n\n    bearer\n      .functionFetch(INTEGRATION_NAME, 'listEscalationPolicies', {\n        query: { setupId: INTEGRATION_SETUP_ID },\n      })\n      .then(({ data }) => {\n        setPolicies(data)\n      })\n      .catch(setError)\n      .finally(() => setLoading(false))\n  }, [])\n\n  return { loading, data: { policies }, error }\n}\n","import { useState, useContext, useCallback } from 'react'\nimport { BearerContext } from '@bearer/react'\nimport { Policy } from '../types'\nimport { INTEGRATION_NAME } from '../../etc/constants'\n\nexport const useCreateIntegration = (INTEGRATION_SETUP_ID: string) => {\n  const [loading, setLoading] = useState(false)\n  const [referenceId, setReferenceId] = useState<string>()\n  const [error, setError] = useState<any>()\n  const { bearer } = useContext(BearerContext)\n\n  const createIntegration = useCallback(\n    (policy: Policy | undefined) => {\n      setLoading(true)\n      return bearer\n        .functionFetch(INTEGRATION_NAME, 'createIntegration', {\n          query: {\n            setupId: INTEGRATION_SETUP_ID,\n          },\n          escalationPolicy: policy,\n        })\n        .then(({ referenceId }) => {\n          setReferenceId(referenceId)\n          return referenceId\n        })\n        .catch(error => {\n          setError(error)\n          return error\n        })\n        .finally(() => {\n          setLoading(false)\n        })\n    },\n    [setLoading, INTEGRATION_SETUP_ID, setReferenceId, setError],\n  )\n\n  return { loading, data: { referenceId }, error, createIntegration }\n}\n","import { useState, useContext, useCallback } from 'react'\nimport { EventResult } from '../types'\nimport { BearerContext } from '@bearer/react'\nimport { INTEGRATION_NAME } from '../../etc/constants'\n\nexport const useSendEvent = (INTEGRATION_SETUP_ID: string) => {\n  const [loading, setLoading] = useState(false)\n  const [eventResult, setEventResult] = useState<EventResult>()\n  const [error, setError] = useState<any>()\n  const { bearer } = useContext(BearerContext)\n\n  const sendEvent = useCallback((referenceId: string) => {\n    setLoading(true)\n    return bearer\n      .functionFetch<EventResult>(INTEGRATION_NAME, 'sendEvent', {\n        query: {\n          setupId: INTEGRATION_SETUP_ID,\n          referenceId,\n        },\n      })\n      .then(result => {\n        setEventResult(result.data)\n        return result.data\n      })\n      .catch(error => {\n        setError(error)\n        return error\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n  }, [])\n\n  return { loading, data: { eventResult }, error, sendEvent }\n}\n","import * as React from 'react'\nimport { withSendEvent } from '../../lib'\nimport { INTEGRATION_SETUP_ID } from '../../etc/constants'\nimport { SendEventProps } from '../../lib/HOC/withSendEvent'\n\ninterface SendTestEventProps {\n  referenceId?: string\n}\n\nconst SendTestEvent: React.FC<SendEventProps & SendTestEventProps> = ({\n  referenceId,\n  fetch: sendEvent,\n  loading,\n}) => {\n  const handleSendEvent = React.useCallback(() => {\n    if (referenceId)\n      sendEvent(referenceId)\n        .then(data => {\n          console.log('Event details', data)\n          alert(JSON.stringify(data))\n        })\n        .catch(console.error)\n  }, [sendEvent, referenceId])\n\n  return (\n    <button\n      type=\"button\"\n      disabled={!referenceId || loading}\n      className=\"btn btn-secondary\"\n      onClick={handleSendEvent}\n    >\n      {loading ? 'Loading...' : 'Send test event'}\n    </button>\n  )\n}\n\nexport default withSendEvent(SendTestEvent, INTEGRATION_SETUP_ID)\n","import React from 'react'\nimport { ComponentType } from 'react'\nimport { useSendEvent } from '../hooks/useSendEvent'\nimport { EventResult, FetchProps } from '../types'\n\nexport type SendEventProps = FetchProps<EventResult>\n\nexport function withSendEvent<P = {}>(\n  Component: ComponentType<SendEventProps & P>,\n  INTEGRATION_SETUP_ID: string,\n): ComponentType<P> {\n  return (props: P) => {\n    const { sendEvent, data, ...sendEventProps } = useSendEvent(\n      INTEGRATION_SETUP_ID,\n    )\n\n    return (\n      <Component\n        {...props}\n        data={data.eventResult}\n        fetch={sendEvent}\n        {...sendEventProps}\n      />\n    )\n  }\n}\n","import * as React from 'react'\nimport { withEscalationPolicies, withCreateIntegration } from '../../lib'\nimport { INTEGRATION_SETUP_ID, REFERENCE_ID } from '../../etc/constants'\nimport SendTestEvent from './SendTestEvent'\nimport { Policy } from '../../lib/types'\n\ninterface EscalationPolicyFormProps {\n  policies?: Policy[]\n}\n\nconst EscalationPolicyForm = withCreateIntegration<EscalationPolicyFormProps>(\n  ({ policies, data: referenceId, fetch: createIntegration, loading }) => {\n    const [selectedPolicyKey, setSelectedPolicy] = React.useState<number>(-1)\n    const handlePolicyChange = React.useCallback(\n      event => {\n        setSelectedPolicy(event.target.value)\n      },\n      [setSelectedPolicy],\n    )\n\n    const handleSubmit = React.useCallback(\n      event => {\n        event.preventDefault()\n        createIntegration(policies && policies[selectedPolicyKey])\n          .then(data => {\n            console.log('Integration details', data)\n          })\n          .catch(console.error)\n      },\n      [createIntegration],\n    )\n\n    if (!policies) {\n      return <p>Fetching escalation policies...</p>\n    }\n\n    return (\n      <form style={{ width: 300 }} onSubmit={handleSubmit}>\n        <select\n          className=\"form-control custom-select\"\n          value={selectedPolicyKey}\n          onChange={handlePolicyChange}\n        >\n          <option>Select an escalation policy</option>\n          <option>-------</option>\n          {policies.map((policy, key) => (\n            <option key={policy.id} value={key}>\n              {policy.summary}\n            </option>\n          ))}\n        </select>\n\n        <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n          {loading ? 'Saving...' : 'Save settings'}\n        </button>\n\n        <SendTestEvent referenceId={referenceId || REFERENCE_ID} />\n      </form>\n    )\n  },\n  INTEGRATION_SETUP_ID,\n)\n\nexport default withEscalationPolicies(\n  ({ data: policies }) => <EscalationPolicyForm policies={policies} />,\n  INTEGRATION_SETUP_ID,\n)\n","import React, { ComponentType } from 'react'\nimport { FetchProps } from '../types'\nimport { useCreateIntegration } from '../hooks/useCreateIntegration'\n\nexport type CreateIntegrationFetchProps = FetchProps<string>\n\nexport function withCreateIntegration<P = {}>(\n  Component: ComponentType<CreateIntegrationFetchProps & P>,\n  INTEGRATION_SETUP_ID: string,\n): ComponentType<P> {\n  return (props: P) => {\n    const {\n      createIntegration,\n      data,\n      ...createIntegrationProps\n    } = useCreateIntegration(INTEGRATION_SETUP_ID)\n\n    return (\n      <Component\n        {...props}\n        fetch={createIntegration}\n        data={data.referenceId}\n        {...createIntegrationProps}\n      />\n    )\n  }\n}\n","import { FetchProps, Policy } from '../types'\nimport React, { ComponentType } from 'react'\nimport { useFetchEscalationPolicies } from '../hooks/useFetchEscalationPolicies'\n\nexport type EscalationPoliciesFetchProps = Pick<\n  FetchProps<Policy[]>,\n  'loading' | 'data' | 'error'\n>\n\nexport function withEscalationPolicies<P = {}>(\n  Component: ComponentType<EscalationPoliciesFetchProps & P>,\n  INTEGRATION_SETUP_ID: string,\n): ComponentType<P> {\n  return (props: P) => {\n    const { data, ...fetchEscalationPolicies } = useFetchEscalationPolicies(\n      INTEGRATION_SETUP_ID,\n    )\n\n    return (\n      <Component {...props} data={data.policies} {...fetchEscalationPolicies} />\n    )\n  }\n}\n","import * as React from 'react'\nimport { render } from 'react-dom'\nimport { Bearer } from '@bearer/react'\nimport { BEARER_CLIENT_ID } from './etc/constants'\n\n// To test different types of integration styles, just switch the uncommented line below\nimport IntegrationSettings from './examples/HOC/IntegrationSettings'\n// import IntegrationSettings from './test/hooks/IntegrationSettings'\n\nfunction App() {\n  return (\n    <Bearer clientId={BEARER_CLIENT_ID}>\n      <div className=\"App\">\n        <IntegrationSettings />\n      </div>\n    </Bearer>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"],"sourceRoot":""}